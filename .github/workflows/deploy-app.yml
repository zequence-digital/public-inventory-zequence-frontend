name: Build and Deploy Inventory sandbox application
on:
  push:
    branches:
      - master 
      - staging
env:
  IMAGE_NAME: "sandbox-inventory-frontend"
  VERSION_TAG: "1.0.0"
jobs:
  build:
    runs-on: self-hosted
    outputs:
      container_name: ${{ steps.set_env.outputs.container_name }}
      port: ${{ steps.set_env.outputs.port }}
      image_tag: ${{ steps.set_env.outputs.image_tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set environment variables
      id: set_env
      run: |
        if [[ ${{ github.ref }} == 'refs/heads/master' ]]; then
          {
            echo "container_name=prod-sandbox-inventory-frontend" 
            echo "port=3002:3000"
            echo "image_tag=sandbox-prod-latest"
            echo "NEXT_PUBLIC_API_BASE_URL=${{ secrets.PROD_API_BASE_URL }}"
            echo "NEXT_PUBLIC_CHANNEL_ID=${{ secrets.PROD_CHANNEL_ID }}"
            echo "NEXT_PUBLIC_CHANNEL_SECRET=${{ secrets.PROD_CHANNEL_SECRET }}"
            echo "NEXT_PUBLIC_CRYPTO_KEY=${{ secrets.PROD_NEXT_PUBLIC_CRYPTO_KEY }}"
          } >> $GITHUB_OUTPUT
        else
          {
            echo "container_name=staging-sandbox-inventory-frontend"
            echo "port=3003:3000" 
            echo "image_tag=sandbox-staging-latest"
            echo "NEXT_PUBLIC_API_BASE_URL=${{ secrets.STAGING_API_BASE_URL }}"
            echo "NEXT_PUBLIC_CHANNEL_ID=${{ secrets.STAGING_CHANNEL_ID }}"
            echo "NEXT_PUBLIC_CHANNEL_SECRET=${{ secrets.STAGING_CHANNEL_SECRET }}"
            echo "NEXT_PUBLIC_CRYPTO_KEY=${{ secrets.STAGING_NEXT_PUBLIC_CRYPTO_KEY }}"
          } >> $GITHUB_OUTPUT
        fi
    
    - name: Build and tag Docker image
      run: |
        docker build \
          --build-arg NEXT_PUBLIC_API_BASE_URL="${{ steps.set_env.outputs.NEXT_PUBLIC_API_BASE_URL }}" \
          --build-arg NEXT_PUBLIC_CHANNEL_ID="${{ steps.set_env.outputs.NEXT_PUBLIC_CHANNEL_ID }}" \
          --build-arg NEXT_PUBLIC_CHANNEL_SECRET="${{ steps.set_env.outputs.NEXT_PUBLIC_CHANNEL_SECRET }}" \
          --build-arg NEXT_PUBLIC_CRYPTO_KEY="${{ steps.set_env.outputs.NEXT_PUBLIC_CRYPTO_KEY }}" \
          -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
        
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.IMAGE_NAME }}:${{ steps.set_env.outputs.image_tag }}

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
    - name: Deploy
      run: |
        if docker ps -a --format "{{.Names}}" | grep -q "${{ needs.build.outputs.container_name }}"; then
          echo "Container ${{ needs.build.outputs.container_name }} already exists, removing it..."
          docker rm -f "${{ needs.build.outputs.container_name }}"
        fi
        
        docker run -d \
          --name "${{ needs.build.outputs.container_name }}" \
          -p ${{ needs.build.outputs.port }} \
          -e NEXT_PUBLIC_API_BASE_URL="${{ steps.set_env.outputs.NEXT_PUBLIC_API_BASE_URL }}" \
          -e NEXT_PUBLIC_CHANNEL_ID="${{ steps.set_env.outputs.NEXT_PUBLIC_CHANNEL_ID }}" \
          -e NEXT_PUBLIC_CHANNEL_SECRET="${{ steps.set_env.outputs.NEXT_PUBLIC_CHANNEL_SECRET }}" \
          -e NEXT_PUBLIC_CRYPTO_KEY="${{ steps.set_env.outputs.NEXT_PUBLIC_CRYPTO_KEY }}" \
          ${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image_tag }}

  cleanup:
    needs: deploy
    runs-on: self-hosted
    steps:
    - name: Cleanup
      run: |
        echo "Cleaning up"
        docker system prune -af
        docker image prune -af
