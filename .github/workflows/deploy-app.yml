name: Build and Deploy Inventory sandbox application
on:
  push:
    branches:
      - master 
      - staging
env:
  IMAGE_NAME: "sandbox-inventory-frontend"
  VERSION_TAG: "1.0.0"
jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set environment variables
      id: set_env
      run: |
        if [[ ${{ github.ref }} == 'refs/heads/master' ]]; then
          echo "container_name=prod-sandbox-inventory-frontend" >> $GITHUB_ENV
          echo "port=3002:3000" >> $GITHUB_ENV
          echo "image_tag=sandbox-prod-latest" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_API_BASE_URL=${{ secrets.PROD_API_BASE_URL }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_CHANNEL_ID=${{ secrets.PROD_CHANNEL_ID }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_CHANNEL_SECRET=${{ secrets.PROD_CHANNEL_SECRET }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_CRYPTO_KEY=${{ secrets.PROD_NEXT_PUBLIC_CRYPTO_KEY }}" >> $GITHUB_ENV
        else
          echo "container_name=staging-sandbox-inventory-frontend" >> $GITHUB_ENV
          echo "port=3003:3000" >> $GITHUB_ENV
          echo "image_tag=sandbox-staging-latest" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_API_BASE_URL=${{ secrets.STAGING_API_BASE_URL }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_CHANNEL_ID=${{ secrets.STAGING_CHANNEL_ID }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_CHANNEL_SECRET=${{ secrets.STAGING_CHANNEL_SECRET }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_CRYPTO_KEY=${{ secrets.STAGING_NEXT_PUBLIC_CRYPTO_KEY }}" >> $GITHUB_ENV
        fi

    - name: Debug Environment Variables
      run: |
        echo "Current environment variables (masked):"
        echo "NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL:0:5}..."
        echo "NEXT_PUBLIC_CHANNEL_ID=${NEXT_PUBLIC_CHANNEL_ID:0:5}..."
        echo "NEXT_PUBLIC_CHANNEL_SECRET=${NEXT_PUBLIC_CHANNEL_SECRET:0:5}..."
        echo "NEXT_PUBLIC_CRYPTO_KEY=${NEXT_PUBLIC_CRYPTO_KEY:0:5}..."

    - name: Build and tag Docker image
      run: |
        docker build \
          --build-arg NEXT_PUBLIC_API_BASE_URL="${NEXT_PUBLIC_API_BASE_URL}" \
          --build-arg NEXT_PUBLIC_CHANNEL_ID="${NEXT_PUBLIC_CHANNEL_ID}" \
          --build-arg NEXT_PUBLIC_CHANNEL_SECRET="${NEXT_PUBLIC_CHANNEL_SECRET}" \
          --build-arg NEXT_PUBLIC_CRYPTO_KEY="${NEXT_PUBLIC_CRYPTO_KEY}" \
          -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
        
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.IMAGE_NAME }}:${{ env.image_tag }}

    - name: Deploy
      run: |
        if docker ps -a --format "{{.Names}}" | grep -q "${container_name}"; then
          echo "Container ${container_name} already exists, removing it..."
          docker rm -f "${container_name}"
        fi
        
        docker run -d \
          --name "${container_name}" \
          -p ${port} \
          -e NEXT_PUBLIC_API_BASE_URL="${NEXT_PUBLIC_API_BASE_URL}" \
          -e NEXT_PUBLIC_CHANNEL_ID="${NEXT_PUBLIC_CHANNEL_ID}" \
          -e NEXT_PUBLIC_CHANNEL_SECRET="${NEXT_PUBLIC_CHANNEL_SECRET}" \
          -e NEXT_PUBLIC_CRYPTO_KEY="${NEXT_PUBLIC_CRYPTO_KEY}" \
          ${{ env.IMAGE_NAME }}:${image_tag}
        
        echo "Verifying environment variables in container:"
        docker exec ${container_name} env | grep NEXT_PUBLIC_

    - name: Cleanup
      run: |
        echo "Cleaning up"
        docker system prune -af
        docker image prune -af
