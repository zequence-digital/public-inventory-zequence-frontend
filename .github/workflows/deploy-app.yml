name: Build and Deploy Inventory sandbox application
on:
  push:
    branches:
      - master
      - staging
      - development
env:
  IMAGE_NAME: "sandbox-inventory-frontend"
  VERSION_TAG: "1.0.0"
jobs:
  build:
    runs-on: self-hosted
    outputs:
      container_name: ${{ steps.set_env.outputs.container_name }}
      port: ${{ steps.set_env.outputs.port }}
      image_tag: ${{ steps.set_env.outputs.image_tag }}
      env_file: ${{ steps.set_env.outputs.env_file }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Recommended for SonarQube scan relevancy
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Choose the Node.js version that matches your project
      
      - name: Set environment variables
        id: set_env
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/master' ]]; then
            ENV_FILE="/home/ubuntu/envs/frontend/sandbox-prod/prod.env"
            {
              echo "container_name=prod-sandbox-inventory-frontend"
              echo "port=3002:3000"
              echo "image_tag=sandbox-prod-latest"
              echo "env_file=${ENV_FILE}"
            } >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == 'refs/heads/staging' ]]; then
            ENV_FILE="/home/ubuntu/envs/frontend/sandbox/sandbox-staging.env"
            {
              echo "container_name=staging-sandbox-inventory-frontend"
              echo "port=3003:3000"
              echo "image_tag=sandbox-staging-latest"
              echo "env_file=${ENV_FILE}"
            } >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == 'refs/heads/development' ]]; then
            ENV_FILE="/home/ubuntu/envs/frontend/sandbox/sandbox-development.env"
            {
              echo "container_name=development-sandbox-inventory-frontend"
              echo "port=3004:3000"
              echo "image_tag=sandbox-development-latest"
              echo "env_file=${ENV_FILE}"
            } >> $GITHUB_OUTPUT
          fi
      
      # - name: Install dependencies
      #   run: |
      #     npm install
      #     npm install -g npm@latest
      
      # - name: Run tests and generate coverage
      #   run: |
      #     npm run test:coverage
      
      - name: Load environment variables
        run: |
          set -a
          source "${{ steps.set_env.outputs.env_file }}"
          set +a
          docker build \
            --build-arg NEXT_PUBLIC_API_BASE_URL="${NEXT_PUBLIC_API_BASE_URL}" \
            --build-arg NEXT_PUBLIC_CHANNEL_ID="${NEXT_PUBLIC_CHANNEL_ID}" \
            --build-arg NEXT_PUBLIC_CHANNEL_SECRET="${NEXT_PUBLIC_CHANNEL_SECRET}" \
            --build-arg NEXT_PUBLIC_CRYPTO_KEY="${NEXT_PUBLIC_CRYPTO_KEY}" \
            -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.IMAGE_NAME }}:${{ steps.set_env.outputs.image_tag }}
      
      - name: Install required tools
        run: |
          sudo apt update
          sudo apt install unzip -y
      
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: .
          args: >
              -Dsonar.projectKey=sandbox-inventory-frontend
              -Dsonar.sources=src
              -Dsonar.exclusions=**/node_modules/**,**/.next/**,**/*.test.js,**/*.test.jsx,**/*.spec.js,**/*.spec.jsx
              -Dsonar.sourceEncoding=UTF-8
              -Dsonar.inclusions=src/app/**/*,src/components/**/*,src/crypto/**/*,src/helpers/**/*,src/hooks/**/*,src/lib/**/*,src/providers/**/*,src/queries/**/*,src/routes/**/*,src/schemas/**/*,src/services/**/*,src/store/**/*,src/types/**/*,src/utils/**/*
              -Dsonar.cpd.exclusions=src/types/**/*
              -Dsonar.scm.exclusions.disabled=true
              # -Dsonar.projectKey=sandbox-inventory-frontend
              # -Dsonar.sources=src
              # -Dsonar.exclusions=**/node_modules/**,**/.next/**,**/*.test.js,**/*.test.jsx,**/*.spec.js,**/*.spec.jsx
              # -Dsonar.sourceEncoding=UTF-8
              # -Dsonar.inclusions=**/*.js,**/*.jsx,**/*.ts,**/*.tsx


  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Deploy
        run: |
          if docker ps -a --format "{{.Names}}" | grep -q "${{ needs.build.outputs.container_name }}"; then
            echo "Container ${{ needs.build.outputs.container_name }} already exists, removing it..."
            docker rm -f "${{ needs.build.outputs.container_name }}"
          fi
          echo "Starting new container: ${{ needs.build.outputs.container_name }}"
          echo "Using env file: ${{ needs.build.outputs.env_file }}"
          if [ ! -f "${{ needs.build.outputs.env_file }}" ]; then
            echo "Error: Environment file ${{ needs.build.outputs.env_file }} not found!"
            exit 1
          fi
          echo "Environment file contents (excluding secrets):"
          grep -v SECRET "${{ needs.build.outputs.env_file }}" || true
          docker run -d \
            --name "${{ needs.build.outputs.container_name }}" \
            -p ${{ needs.build.outputs.port }} \
            --env-file "${{ needs.build.outputs.env_file }}" \
            ${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image_tag }}
          echo "Verifying environment variables in container:"
          docker exec ${{ needs.build.outputs.container_name }} env | grep NEXT_PUBLIC_

  cleanup:
    needs: deploy
    runs-on: self-hosted
    steps:
      - name: Cleanup
        run: |
          echo "Cleaning up"
          docker system prune -af
          docker image prune -af
